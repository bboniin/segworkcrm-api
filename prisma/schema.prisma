generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  name         String
  photo        String?
  email        String    @unique
  phone_number String
  password     String
  create_at    DateTime? @default(now())
  update_at    DateTime? @default(now())
  grids        Grid[]
  leads        Lead[]

  @@map("users")
}

model Admin {
  id        String    @id @default(uuid())
  password  String
  email     String    @unique
  create_at DateTime? @default(now())
  update_at DateTime? @default(now())

  @@map("admins")
}

model Grid {
  id               String            @id @default(uuid())
  name             String
  user_id          String
  create_at        DateTime?         @default(now())
  update_at        DateTime?         @default(now())
  team             String?           @default("")
  user             User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  grid_invitations GridInvitations[]
  tables           Table[]

  @@map("grids")
}

model Table {
  id              String    @id @default(uuid())
  name            String
  order           Int
  grid_id         String
  create_at       DateTime? @default(now())
  update_at       DateTime? @default(now())
  view_conversion Boolean   @default(false)
  grid            Grid      @relation(fields: [grid_id], references: [id], onDelete: Cascade)
  leads           Lead[]

  @@map("tables")
}

model Lead {
  id               String     @id @default(uuid())
  name             String
  email            String?    @default("")
  phone_number     String?    @default("")
  photo            String?    @default("")
  table_id         String
  user_id          String
  recurrence       Boolean    @default(false) 
  date_recurrence  DateTime?  @default(now())  
  value_recurrence Float?     @default(0)
  name_recurrence  String?    @default("")   
  create_at        DateTime?  @default(now())
  update_at        DateTime?  @default(now())
  observation      String?    @default("")
  value            Float?     @default(0)
  table            Table      @relation(fields: [table_id], references: [id], onDelete: Cascade)
  user             User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  historical       Historic[]
  charges          Charge[]
  recurrences      Recurrence[]

  @@map("leads")
}

model RecurrencePlans {
  id             String    @id @default(uuid())
  user_id        String
  name           String
  period_in_days Int
  value          Float
  create_at      DateTime? @default(now())
  update_at      DateTime? @default(now())

  @@map("recurrence_plans")
}

model Recurrence {
  id             String    @id @default(uuid())
  user_id        String
  lead_id        String
  name           String
  period_in_days Int
  value          Float
  create_at      DateTime? @default(now())
  update_at      DateTime? @default(now())
  lead           Lead      @relation(fields: [lead_id], references: [id], onDelete: Cascade)

  @@map("recurrences")
}

model Charge {
  id          String    @id @default(uuid())
  user_id     String
  lead_id     String
  name        String
  value       Float
  date_charge DateTime
  confirmed   Boolean  
  create_at   DateTime? @default(now())
  update_at   DateTime? @default(now())
  lead        Lead      @relation(fields: [lead_id], references: [id], onDelete: Cascade)

  @@map("charges")
}


model Historic {
  id        String    @id @default(uuid())
  name      String
  lead_id   String
  create_at DateTime? @default(now())
  update_at DateTime? @default(now())
  lead      Lead      @relation(fields: [lead_id], references: [id], onDelete: Cascade)

  @@map("historical")
}

model GridInvitations {
  id        String    @id @default(uuid())
  email     String
  grid_id   String
  status    String    @default("enviado")
  create_at DateTime? @default(now())
  update_at DateTime? @default(now())
  name      String
  user_id   String?   @default("")
  grid      Grid      @relation(fields: [grid_id], references: [id], onDelete: Cascade)

  @@map("grid_invitations")
}

model PasswordForgot {
  id         String    @id @default(uuid())
  user_email String
  code       String
  create_at  DateTime? @default(now())
  update_at  DateTime? @default(now())

  @@map("passwords_forgot")
}
